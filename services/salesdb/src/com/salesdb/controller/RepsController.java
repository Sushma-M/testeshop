/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker-com*/

package com.salesdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.salesdb.service.QuotesService;
import com.salesdb.service.RepsService;
import com.salesdb.service.TasksService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wordnik.swagger.annotations.*;
import com.salesdb.*;
import com.salesdb.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Reps.
 * @see com.salesdb.Reps
 */
@RestController(value = "Salesdb.RepsController")
@RequestMapping("/salesdb/Reps")
@Api(description = "Exposes APIs to work with Reps resource.", value = "RepsController")
public class RepsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(RepsController.class);

    @Autowired
    @Qualifier("salesdb.RepsService")
    private RepsService repsService;

    @Autowired
    @Qualifier("salesdb.TasksService")
    private TasksService tasksService;

    @Autowired
    @Qualifier("salesdb.QuotesService")
    private QuotesService quotesService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Reps instances matching the search criteria.")
    public Page<Reps> findAll(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Repss list");
        return repsService.findAll(queryFilters, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setRepsService(RepsService service) {
        this.repsService = service;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Reps instances.")
    public Long countAll() {
        LOGGER.debug("counting Repss");
        Long count = repsService.countAll();
        return count;
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the list of Reps instances.")
    public Page<Reps> getRepss(Pageable pageable) {
        LOGGER.debug("Rendering Repss list");
        return repsService.findAll(pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Reps instance.")
    public Reps createReps(@RequestBody Reps instance) {
        LOGGER.debug("Create Reps with information: {}", instance);
        instance = repsService.create(instance);
        LOGGER.debug("Created Reps with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Reps instance associated with the given id.")
    public Reps getReps(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Reps with id: {}", id);
        Reps instance = repsService.findById(id);
        LOGGER.debug("Reps details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Reps instance associated with the given id.")
    public Reps editReps(@PathVariable(value = "id") Integer id, @RequestBody Reps instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Reps with id: {}", instance.getId());
        instance.setId(id);
        instance = repsService.update(instance);
        LOGGER.debug("Reps details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Reps instance associated with the given id.")
    public boolean delete(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Reps with id: {}", id);
        Reps deleted = repsService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}/taskses", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Gets the taskses instance associated with the given id.")
    public Page<Tasks> findAssociatedtaskses(Pageable pageable, @PathVariable(value = "id") Integer id) {
        LOGGER.debug("Fetching all associated taskses");
        return tasksService.findAssociatedValues(id, "reps", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/quoteses", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Gets the quoteses instance associated with the given id.")
    public Page<Quotes> findAssociatedquoteses(Pageable pageable, @PathVariable(value = "id") Integer id) {
        LOGGER.debug("Fetching all associated quoteses");
        return quotesService.findAssociatedValues(id, "reps", "id", pageable);
    }
}
