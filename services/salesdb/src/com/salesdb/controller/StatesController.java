/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker-com*/

package com.salesdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.salesdb.service.CustomersService;
import com.salesdb.service.StatesService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wordnik.swagger.annotations.*;
import com.salesdb.*;
import com.salesdb.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class States.
 * @see com.salesdb.States
 */
@RestController(value = "Salesdb.StatesController")
@RequestMapping("/salesdb/States")
@Api(description = "Exposes APIs to work with States resource.", value = "StatesController")
public class StatesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(StatesController.class);

    @Autowired
    @Qualifier("salesdb.StatesService")
    private StatesService statesService;

    @Autowired
    @Qualifier("salesdb.CustomersService")
    private CustomersService customersService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of States instances matching the search criteria.")
    public Page<States> findAll(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Statess list");
        return statesService.findAll(queryFilters, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setStatesService(StatesService service) {
        this.statesService = service;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of States instances.")
    public Long countAll() {
        LOGGER.debug("counting Statess");
        Long count = statesService.countAll();
        return count;
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the list of States instances.")
    public Page<States> getStatess(Pageable pageable) {
        LOGGER.debug("Rendering Statess list");
        return statesService.findAll(pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new States instance.")
    public States createStates(@RequestBody States instance) {
        LOGGER.debug("Create States with information: {}", instance);
        instance = statesService.create(instance);
        LOGGER.debug("Created States with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the States instance associated with the given id.")
    public States getStates(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting States with id: {}", id);
        States instance = statesService.findById(id);
        LOGGER.debug("States details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the States instance associated with the given id.")
    public States editStates(@PathVariable(value = "id") Integer id, @RequestBody States instance) throws EntityNotFoundException {
        LOGGER.debug("Editing States with id: {}", instance.getId());
        instance.setId(id);
        instance = statesService.update(instance);
        LOGGER.debug("States details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the States instance associated with the given id.")
    public boolean delete(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting States with id: {}", id);
        States deleted = statesService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}/customerses", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Gets the customerses instance associated with the given id.")
    public Page<Customers> findAssociatedcustomerses(Pageable pageable, @PathVariable(value = "id") Integer id) {
        LOGGER.debug("Fetching all associated customerses");
        return customersService.findAssociatedValues(id, "states", "id", pageable);
    }
}
